generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  user_type UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  Doctor    Doctor?  @relation("UserDoctor")
  Staff     Staff?   @relation("UserStaff")
  Tokens    Token[]  @relation("UserTokens")
  CreatedDoctors Doctor[] @relation("CreatedDoctors") // for created_by
  Logs      Log[]    @relation("UserLogs")
}

model Doctor {
  id         String   @id @default(uuid())
  phone      String
  specialty  String
  created_by String? 
  status     Status   @default(pending)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime? @db.Timestamp(6)

  User     User     @relation("UserDoctor", fields: [id], references: [id])
  Creator  User?    @relation("CreatedDoctors", fields: [created_by], references: [id])
  Staff    Staff[]
}

model Staff {
  id         String   @id @default(uuid())
  phone      String?
  role       StaffRole
  created_by String?
  status     Status   @default(pending)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime? @db.Timestamp(6)

  User    User   @relation("UserStaff", fields: [id], references: [id])
  Creator Doctor? @relation(fields: [created_by], references: [id])
}

model Token {
  id            String   @id @default(uuid())
  user_id       String?
  refresh_token String
  expires_at    DateTime

  User User? @relation("UserTokens", fields: [user_id], references: [id])
}

model Patient {
  id                String   @id @default(uuid())
  name              String
  birth_date        DateTime?
  gender            Gender
  phone             String?
  email             String? @unique
  address           String?
  emergency_contact String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?
}

model Log {
  id           String   @id @default(uuid())
  user_id      String?
  action       LogAction
  target_table LogTargetTable
  target_id    LogTargetId
  details      String?
  created_at   DateTime @default(now())

  User         User?    @relation("UserLogs", fields: [user_id], references: [id])
}

enum Gender {
  male
  female
}

enum StaffRole {
  nurse
  receptionist
}

enum Status {
  pending
  active
  inactive
}

enum UserType {
  doctor
  staff
  admin
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
}
enum LogTargetTable {
  User
  Doctor
  Staff
  Token
  Patient
}
enum LogTargetId {
  id
  user_id
  doctor_id
  staff_id
  token_id
  patient_id
}